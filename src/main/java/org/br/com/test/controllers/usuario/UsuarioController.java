package org.br.com.test.controllers.usuario;

import io.restassured.response.Response;
import org.br.com.core.support.logger.LogFormatter;
import org.br.com.test.manager.TokenManager;
import org.br.com.test.manager.UsuarioManager;
import org.br.com.test.model.request.LoginRequest;
import org.br.com.test.model.request.UsuarioRequest;
import org.br.com.test.model.response.UsuarioResponse;
import org.br.com.core.filter.EvidenceFilter;
import org.br.com.core.support.Context;
import org.br.com.test.sheets.login.LoginModel;
import org.br.com.test.sheets.cadastro.CadastroDataSheet;
import org.br.com.test.utils.LogConfig;
import org.junit.Assert;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.*;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.not;

public class UsuarioController {

	private Response response;
	private static final String BASE_URL = "http://localhost:3000";
	private static final String ENDPOINT_USUARIOS = "/usuarios";
	private static final String ENDPOINT_LOGIN = "/auth/login";

	/**
	 * M√©todo auxiliar para obter a folha de dados de cadastro do contexto.
	 * Centraliza a l√≥gica de busca e casting.
	 * TODO: Adicionar tratamento de exce√ß√£o mais robusto para o casting.
	 * TODO: Verificar se 'cadastroSheet' √© a chave correta para o contexto.
	 *
	 * @return CadastroDataSheet se encontrado no contexto, caso contr√°rio null.
	 * @see org.br.com.core.support.Context
	 */
	private CadastroDataSheet getCadastroSheet() {
		Object sheet = Context.get("cadastroSheet");
		if (sheet instanceof CadastroDataSheet) {
			return (CadastroDataSheet) sheet;
		}
		return null; // Retorna nulo se n√£o houver dados de cadastro no contexto
	}

	/**
	 * M√©todo auxiliar para obter os dados de login do contexto.
	 * TODO: Garantir que LoginModel seja sempre o tipo esperado para Context.getData().
	 *
	 * @return LoginModel contendo os dados de login.
	 * @throws IllegalStateException se os dados de login n√£o forem encontrados no contexto. */
	private LoginModel getDadosLoginExcel() {
		Object data = Context.getData();
		if (data instanceof LoginModel) {
			return (LoginModel) data;
		}
		// Lan√ßa uma exce√ß√£o clara se os dados de login (essenciais) n√£o forem encontrados
		throw new IllegalStateException("Dados de login (LoginModel) n√£o encontrados no contexto.");
	}

	// =================================================================
	// == M√âTODOS DE A√á√ÉO (CRUD COMPLETO)
	// =================================================================

	/**
	 * Carrega os dados de usu√°rio a partir da planilha (CadastroDataSheet ou LoginModel)
	 * e os armazena no {@link UsuarioManager}. Prioriza dados completos de cadastro.
	 * TODO: Refatorar para usar um √∫nico m√©todo de obten√ß√£o de dados da planilha.
	 */
	public void carregarDadosDaPlanilha() {
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String nomeCompleto;
		String nomeUsuario;
		String email;
		String senha;

		// Prioriza dados da TBL_CADASTRO (dados completos)
		if (cadastroSheet != null) {
			nomeCompleto = cadastroSheet.getNomeCompleto();
			nomeUsuario = cadastroSheet.getNomeUsuario();
			email = cadastroSheet.getEmail();
			senha = cadastroSheet.getSenha();
		}
		// Fallback para dados da TBL_CENARIOS se n√£o houver dados de cadastro
		else {
			email = loginModel.getEmail();
			senha = loginModel.getSenha();
			nomeCompleto = "Usuario da Planilha";
			nomeUsuario = "usuario.planilha";
		}

		// Apenas salvar os dados no contexto, sem cadastrar. TODO: Verificar se o UsuarioManager √© o local ideal para armazenar esses dados temporariamente.
		UsuarioManager.setEmailUsuario(email); // TODO: Instanciar UsuarioManager
		UsuarioManager.setSenhaUsuario(senha); // TODO: Instanciar UsuarioManager
		UsuarioManager.setNomeCompletoUsuario(nomeCompleto); // TODO: Instanciar UsuarioManager
		UsuarioManager.setNomeUsuario(nomeUsuario);

		LogFormatter.logStep("üìã Dados carregados da planilha:");
		LogFormatter.logStep("   üë§ Nome: " + nomeCompleto);
		LogFormatter.logStep("   üîñ Usu√°rio: " + nomeUsuario);
		LogFormatter.logStep("   üìß Email: " + email);
		LogFormatter.logStep("   üîë Senha: " + senha);
		LogFormatter.logStep("‚ÑπÔ∏è Usu√°rio n√£o cadastrado - usando dados existentes da planilha");
	}

	/**
	 * Tenta cadastrar um novo usu√°rio utilizando um e-mail que j√° existe na base de dados.
	 * Os dados s√£o obtidos da planilha.
	 * TODO: Adicionar valida√ß√£o para garantir que o e-mail realmente exista antes de tentar duplicar. */
	public void tentarCadastrarUsuarioComEmailDuplicado() {
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String nomeCompleto;
		String nomeUsuario;
		String email;
		String senha;

		if (cadastroSheet != null) {
			nomeCompleto = cadastroSheet.getNomeCompleto();
			nomeUsuario = cadastroSheet.getNomeUsuario();
			email = cadastroSheet.getEmail();
			senha = cadastroSheet.getSenha();
		} else {
			email = loginModel.getEmail();
			senha = loginModel.getSenha();
			nomeCompleto = "Usuario Duplicado";
			nomeUsuario = "usuario.duplicado";
		}

		UsuarioRequest usuarioDuplicado = UsuarioRequest.builder() // TODO: Instanciar UsuarioRequest
				.nomeCompleto(nomeCompleto)
				.nomeUsuario(nomeUsuario)
				.email(email)
				.senha(senha)
				.build();

		response = given()
				.filter(new EvidenceFilter()) // TODO: Instanciar EvidenceFilter
				.header("Content-Type", "application/json")
				.baseUri(BASE_URL)
				.body(usuarioDuplicado) // TODO: Enviar o objeto UsuarioRequest no corpo da requisi√ß√£o
				.when()
				.post(ENDPOINT_USUARIOS);

		LogFormatter.logStep("A√á√ÉO: Tentativa de cadastro com e-mail duplicado");
		LogFormatter.logStep("üë§ Nome: " + nomeCompleto);
		LogFormatter.logStep("üîñ Nome Usu√°rio: " + nomeUsuario);
		LogFormatter.logStep("üìß Email: " + email);
	}

	/**
	 * Tenta cadastrar um novo usu√°rio utilizando um nome de usu√°rio que j√° existe na base de dados.
	 * Os dados s√£o obtidos da planilha.
	 * TODO: Adicionar valida√ß√£o para garantir que o nome de usu√°rio realmente exista antes de tentar duplicar. */
	public void tentarCadastrarUsuarioComNomeDeUsuarioDuplicado() {
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String nomeCompleto;
		String nomeUsuario;
		String email;
		String senha;

		if (cadastroSheet != null) {
			nomeCompleto = cadastroSheet.getNomeCompleto();
			nomeUsuario = cadastroSheet.getNomeUsuario(); // Nome que j√° existe
			email = cadastroSheet.getEmail();
			senha = cadastroSheet.getSenha();
		} else {
			email = loginModel.getEmail();
			senha = loginModel.getSenha();
			nomeCompleto = "Usuario Nome Duplicado";
			nomeUsuario = "usuario.duplicado";
		}

		UsuarioRequest usuarioDuplicado = UsuarioRequest.builder() // TODO: Instanciar UsuarioRequest
				.nomeCompleto(nomeCompleto)
				.nomeUsuario(nomeUsuario)
				.email(email)
				.senha(senha)
				.build();

		response = given()
				.filter(new EvidenceFilter()) // TODO: Instanciar EvidenceFilter
				.header("Content-Type", "application/json")
				.baseUri(BASE_URL)
				.body(usuarioDuplicado) // TODO: Enviar o objeto UsuarioRequest no corpo da requisi√ß√£o
				.when()
				.post(ENDPOINT_USUARIOS);

		LogFormatter.logStep("A√á√ÉO: Tentativa de cadastro com nome de usu√°rio duplicado");
		LogFormatter.logStep("üîñ Nome Usu√°rio duplicado: " + nomeUsuario);
		LogFormatter.logStep("üìß Email: " + email);
	}

	/**
	 * Tenta cadastrar um novo usu√°rio com um formato de e-mail inv√°lido.
	 * Os dados s√£o obtidos da planilha.
	 * TODO: Adicionar exemplos de e-mails inv√°lidos para testes. */
	public void tentarCadastrarUsuarioComEmailInvalido() {
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String nomeCompleto;
		String nomeUsuario;
		String email;
		String senha;

		if (cadastroSheet != null) {
			nomeCompleto = cadastroSheet.getNomeCompleto();
			nomeUsuario = cadastroSheet.getNomeUsuario();
			email = cadastroSheet.getEmail(); // Email inv√°lido da planilha
			senha = cadastroSheet.getSenha();
		} else {
			email = loginModel.getEmail(); // Email inv√°lido da planilha
			senha = loginModel.getSenha();
			nomeCompleto = "Usuario Email Invalido";
			nomeUsuario = "usuario.email.invalido";
		}

		UsuarioRequest usuarioEmailInvalido = UsuarioRequest.builder() // TODO: Instanciar UsuarioRequest
				.nomeCompleto(nomeCompleto)
				.nomeUsuario(nomeUsuario)
				.email(email)
				.senha(senha)
				.build();

		response = given()
				.filter(new EvidenceFilter()) // TODO: Instanciar EvidenceFilter
				.header("Content-Type", "application/json")
				.baseUri(BASE_URL)
				.body(usuarioEmailInvalido) // TODO: Enviar o objeto UsuarioRequest no corpo da requisi√ß√£o
				.when()
				.post(ENDPOINT_USUARIOS);

		LogFormatter.logStep("A√á√ÉO: Tentativa de cadastro com email inv√°lido");
		LogFormatter.logStep("üìß Email inv√°lido: " + email);
	}

	/**
	 * Tenta cadastrar um novo usu√°rio com uma senha que n√£o atende aos requisitos de seguran√ßa.
	 * Os dados s√£o obtidos da planilha.
	 * TODO: Definir os requisitos de senha esperados para o sistema. */
	public void tentarCadastrarUsuarioComSenhaInvalida() {
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String nomeCompleto;
		String nomeUsuario;
		String email;
		String senha;

		if (cadastroSheet != null) {
			nomeCompleto = cadastroSheet.getNomeCompleto();
			nomeUsuario = cadastroSheet.getNomeUsuario();
			email = cadastroSheet.getEmail();
			senha = cadastroSheet.getSenha(); // Senha inv√°lida da planilha
		} else {
			email = loginModel.getEmail();
			senha = loginModel.getSenha(); // Senha inv√°lida da planilha
			nomeCompleto = "Usuario Senha Invalida";
			nomeUsuario = "usuario.senha.invalida";
		}

		UsuarioRequest usuarioSenhaInvalida = UsuarioRequest.builder() // TODO: Instanciar UsuarioRequest
				.nomeCompleto(nomeCompleto)
				.nomeUsuario(nomeUsuario)
				.email(email)
				.senha(senha)
				.build();

		response = given()
				.filter(new EvidenceFilter()) // TODO: Instanciar EvidenceFilter
				.header("Content-Type", "application/json")
				.baseUri(BASE_URL)
				.body(usuarioSenhaInvalida) // TODO: Enviar o objeto UsuarioRequest no corpo da requisi√ß√£o
				.when()
				.post(ENDPOINT_USUARIOS);

		LogFormatter.logStep("A√á√ÉO: Tentativa de cadastro com senha inv√°lida");
		LogFormatter.logStep("üîë Senha inv√°lida: " + mascararSenha(senha));
	}

	/**
	 * Tenta cadastrar um usu√°rio com dados inv√°lidos, como e-mail e senha vazios.
	 * TODO: Expandir para testar outros campos inv√°lidos (ex: nome muito curto/longo).
	 */

	public void tentarCadastrarUsuarioComDadosInvalidos() {
		UsuarioRequest usuarioInvalido = new UsuarioRequest("Nome Exemplo", "usuario.exemplo", "", "");
		response = given().filter(new EvidenceFilter()).header("Content-Type", "application/json").baseUri(BASE_URL).body(usuarioInvalido).when().post(ENDPOINT_USUARIOS);
		LogFormatter.logStep("A√á√ÉO: Tentativa de cadastro com dados inv√°lidos (e-mail e senha vazios).");
	}

	/**
	 * Realiza uma tentativa de login no sistema.
	 *
	 * @param comCredenciaisValidas true para usar credenciais v√°lidas, false para usar credenciais inv√°lidas.
	 * TODO: Separar a l√≥gica de login v√°lido e inv√°lido em m√©todos distintos para clareza. */
	public void realizarLogin(boolean comCredenciaisValidas) {
		LoginRequest loginRequest;
		CadastroDataSheet cadastroSheet = getCadastroSheet();
		LoginModel loginModel = getDadosLoginExcel();

		String email;
		String senha;

		if (comCredenciaisValidas) {
			// Priorizar dados da TBL_CADASTRO
			if (cadastroSheet != null) {
				email = cadastroSheet.getEmail();
				senha = cadastroSheet.getSenha();
			} else {
				email = loginModel.getEmail();
				senha = loginModel.getSenha();
			}
			LogFormatter.logStep("A√á√ÉO: Realizando login com credenciais v√°lidas: " + email);
		} else {
			// Para credenciais inv√°lidas, usar dados da planilha mas com senha errada
			if (cadastroSheet != null) {
				email = cadastroSheet.getEmail();
			} else {
				email = loginModel.getEmail();
			}
			senha = "senha_errada_123";
			LogFormatter.logStep("A√á√ÉO: Tentando realizar login com credenciais inv√°lidas.");
		}

		loginRequest = LoginRequest.builder() // TODO: Instanciar LoginRequest
				.email(email)
				.senha(senha)
				.build();

		response = given()
				.filter(new EvidenceFilter())
				.header("Content-Type", "application/json")
				.baseUri(BASE_URL) // TODO: Usar a constante BASE_URL
				.body(loginRequest) // TODO: Enviar o objeto LoginRequest no corpo da requisi√ß√£o
				.when()
				.post(ENDPOINT_LOGIN);

		// Se login foi bem-sucedido, salvar o token
		if (response.getStatusCode() == 200) {
			String token = response.jsonPath().getString("token"); // TODO: Extrair o token da resposta
			String userId = response.jsonPath().getString("user.id"); // TODO: Extrair o ID do usu√°rio da resposta

			if (token != null && !token.isEmpty()) {
				TokenManager.setToken(token); // TODO: Instanciar TokenManager
				LogFormatter.logStep("‚úÖ Token salvo com sucesso: " + mascararToken(token)); // TODO: Mascarar o token para logs
			} else {
				LogFormatter.logStep("‚ö†Ô∏è Token n√£o encontrado na resposta");
			}

			if (userId != null && !userId.isEmpty()) {
				TokenManager.setUserId(userId);
				UsuarioManager.setIdUsuario(userId);
				LogFormatter.logStep("‚úÖ User ID salvo: " + mascararId(userId));
			}

			LogFormatter.logStep("‚úÖ Login realizado com sucesso");
		} else {
			// Login falhou - verificar se √© erro de credenciais inv√°lidas
			String responseBody = response.getBody().asPrettyString();
			if (responseBody.contains("Email ou senha inv√°lidos") ||
					responseBody.contains("credenciais inv√°lidas") ||
					response.getStatusCode() == 401) {

				LogFormatter.logStep("‚ùå Login falhou - Credenciais inv√°lidas");
				LogFormatter.logStep("üìã ATEN√á√ÉO: Usu√°rio n√£o encontrado ou credenciais incorretas");
			} else {
				LogFormatter.logStep("‚ùå Login falhou - Status: " + response.getStatusCode());
				LogFormatter.logStep("Resposta: " + responseBody);
			}
		}
	}

	// ... O restante da classe permanece o mesmo ...
	// (listarUsuarios, buscarUsuarioPorId, atualizarUsuario, excluirUsuario, m√©todos de valida√ß√£o e mascaramento)
	public void listarUsuarios(boolean comAutenticacao) {
	/**
	 * Lista todos os usu√°rios cadastrados no sistema.
	 *
	 * @param comAutenticacao true para incluir o token de autentica√ß√£o na requisi√ß√£o, false caso contr√°rio.
	 * TODO: Adicionar pagina√ß√£o e filtros para a listagem de usu√°rios. */
		var request = given().filter(new EvidenceFilter()).baseUri(BASE_URL);
		if (comAutenticacao) {
			String token = TokenManager.getToken();
			if (token != null && !token.isEmpty()) {
				request.header("Authorization", "Bearer " + token);
				LogFormatter.logStep("üîë Usando token: " + mascararToken(token));
			} else {
				LogFormatter.logStep("‚ö†Ô∏è Token n√£o encontrado para autentica√ß√£o");
			}
		}
		response = request.when().get(ENDPOINT_USUARIOS);
		LogFormatter.logStep("A√á√ÉO: Listagem de usu√°rios (Autenticado: " + comAutenticacao + ").");
	}

	/**
	 * Busca um usu√°rio espec√≠fico pelo seu ID.
	 *
	 * @param comIdValido true para usar um ID de usu√°rio v√°lido (do {@link UsuarioManager}), false para usar um ID inexistente.
	 * @param comAutenticacao true para incluir o token de autentica√ß√£o na requisi√ß√£o, false caso contr√°rio.
	 * TODO: Adicionar valida√ß√£o para o formato do ID. */
	public void buscarUsuarioPorId(boolean comIdValido, boolean comAutenticacao) {
		String id = comIdValido ? UsuarioManager.getIdUsuario() : "id-inexistente";

		// Verificar se o ID √© v√°lido
		if (id == null || id.isEmpty()) {
			id = "id-inexistente";
			LogFormatter.logStep("‚ö†Ô∏è ID do usu√°rio n√£o encontrado, usando ID padr√£o");
		}

		var request = given()
				.filter(new EvidenceFilter())
				.baseUri(BASE_URL)
				.pathParam("id", id);

		if (comAutenticacao) {
			String token = TokenManager.getToken();
			if (token != null && !token.isEmpty()) {
				request.header("Authorization", "Bearer " + token);
				LogFormatter.logStep("üîë Usando token: " + mascararToken(token));
			} else {
				LogFormatter.logStep("‚ö†Ô∏è Token n√£o encontrado para autentica√ß√£o");
			}
		}

		response = request.when().get(ENDPOINT_USUARIOS + "/{id}");
		LogFormatter.logStep("A√á√ÉO: Busca de usu√°rio pelo ID: " + id + " (Autenticado: " + comAutenticacao + ")");
	}

	/**
	 * Atualiza os dados de um usu√°rio existente.
	 *
	 * @param comIdValido true para usar um ID de usu√°rio v√°lido (do {@link UsuarioManager}), false para usar um ID inexistente.
	 * TODO: Permitir a atualiza√ß√£o de campos espec√≠ficos em vez de todos os campos. */
	public void atualizarUsuario(boolean comIdValido) {
		String id = comIdValido ? UsuarioManager.getIdUsuario() : "id-inexistente";

		// Verificar se o ID √© v√°lido
		if (id == null || id.isEmpty()) {
			id = "id-inexistente";
			LogFormatter.logStep("‚ö†Ô∏è ID do usu√°rio n√£o encontrado, usando ID padr√£o");
		}

		String token = TokenManager.getToken();
		if (token == null || token.isEmpty()) {
			LogFormatter.logStep("‚ö†Ô∏è Token n√£o encontrado para autentica√ß√£o");
		} else {
			LogFormatter.logStep("üîë Usando token: " + mascararToken(token));
		}

		// Gerar dados √∫nicos para evitar conflitos
		String timestamp = String.valueOf(System.currentTimeMillis());
		UsuarioRequest usuarioAtualizado = UsuarioRequest.builder() // TODO: Instanciar UsuarioRequest
				.nomeCompleto("Usuario Atualizado " + timestamp)
				.nomeUsuario("usuario.atualizado." + timestamp)
				.email("usuario.atualizado." + timestamp + "@exemplo.com")
				.senha("novaSenha123")
				.build();

		response = given()
				.filter(new EvidenceFilter())
				.header("Content-Type", "application/json")
				.header("Authorization", "Bearer " + token)
				.baseUri(BASE_URL)
				.body(usuarioAtualizado)
				.when()
				.put(ENDPOINT_USUARIOS + "/" + id);

		LogFormatter.logStep("A√á√ÉO: Atualiza√ß√£o do usu√°rio ID: " + id);
		LogFormatter.logStep("üìù Novos dados: " + usuarioAtualizado.getNomeUsuario() + " / " + usuarioAtualizado.getEmail());


	}

	/**
	 * Exclui um usu√°rio do sistema.
	 *
	 * @param comIdValido true para usar um ID de usu√°rio v√°lido (do {@link UsuarioManager}), false para usar um ID inexistente.
	 * @param comAutenticacao true para incluir o token de autentica√ß√£o na requisi√ß√£o, false caso contr√°rio.
	 * TODO: Implementar exclus√£o l√≥gica (soft delete) em vez de exclus√£o f√≠sica. */
	public void excluirUsuario(boolean comIdValido, boolean comAutenticacao) {
		String id = comIdValido ? UsuarioManager.getIdUsuario() : "id-inexistente";
		String token = TokenManager.getToken();

		// VALIDA√á√ÉO CR√çTICA (A parte mais importante)
		if (comIdValido && (id == null || id.isEmpty())) {
			Assert.fail("Pr√©-requisito para exclus√£o falhou: N√£o h√° um ID de usu√°rio v√°lido. Verifique se o login foi bem-sucedido.");
		}
		if (comAutenticacao && (token == null || token.isEmpty())) {
			Assert.fail("Pr√©-requisito para exclus√£o falhou: N√£o h√° um token de autentica√ß√£o. Verifique se o login foi bem-sucedido.");
		}

		// Monta a requisi√ß√£o com base nos par√¢metros
		var request = given()
				.filter(new EvidenceFilter())
				.baseUri(BASE_URL);

		if (comAutenticacao) {
			request.header("Authorization", "Bearer " + token);
			LogFormatter.logStep("üîë Usando token: " + mascararToken(token));
		}

		response = request.when().delete(ENDPOINT_USUARIOS + "/" + id);
		LogFormatter.logStep("A√á√ÉO: Exclus√£o do usu√°rio ID: " + id + " (Autenticado: " + comAutenticacao + ")");
	}


	// =================================================================
	// == M√âTODOS DE VALIDA√á√ÉO
	// =================================================================

	/**
	 * Valida se o status code da resposta HTTP corresponde ao valor esperado.
	 *
	 * @param statusCode O status code esperado.
	 * TODO: Adicionar valida√ß√£o para diferentes categorias de status codes (2xx, 4xx, 5xx). */
	public void validarStatusCode(int statusCode) {
		assertEquals("Status code n√£o corresponde ao esperado. Body: " + response.getBody().asString(), statusCode, response.getStatusCode());
		LogFormatter.logStep("VALIDA√á√ÉO: Status Code esperado '" + statusCode + "' recebido com sucesso.");
	}

	/**
	 * Valida o corpo da resposta de cria√ß√£o de usu√°rio, verificando se o e-mail e nome de usu√°rio
	 * retornados correspondem aos dados utilizados na requisi√ß√£o.
	 * TODO: Validar outros campos da resposta, como o ID do usu√°rio criado.
	 */
	public void validarCorpoUsuarioCriadoComSucesso() {
		UsuarioResponse usuarioResponse = response.as(UsuarioResponse.class);
		assertEquals("O e-mail n√£o corresponde ao esperado.", UsuarioManager.getEmailUsuario(), usuarioResponse.getEmail());
		assertEquals("O nome de usu√°rio n√£o corresponde ao esperado.", UsuarioManager.getNomeUsuario(), usuarioResponse.getNomeUsuario());
		LogFormatter.logStep("VALIDA√á√ÉO: Corpo da resposta de cria√ß√£o de usu√°rio validado com sucesso.");
	}

	/**
	 * Valida o corpo da resposta de login bem-sucedido.
	 * Verifica se o ID do usu√°rio e o e-mail est√£o presentes e, se aplic√°vel, se o ID corresponde ao esperado da planilha.
	 * TODO: Validar a presen√ßa e o formato do token de autentica√ß√£o. */
	public void validarCorpoUsuarioLogadoComSucesso() {
		// Obter ID esperado da planilha (ID real, n√£o mascarado)
		Object data = Context.getData();
		String expectedId = null;

		if (data instanceof LoginModel) {
			LoginModel dadosExcel = (LoginModel) data;
			expectedId = dadosExcel.getIdUsuario(); // ID real da planilha
		}

		// Validar que o ID retornado corresponde ao esperado
		// Se o ID da planilha for um UUID v√°lido (36 caracteres), validar exatamente
		// Se n√£o for, apenas validar que existe um ID v√°lido
		if (expectedId != null && !expectedId.isEmpty() && expectedId.length() >= 36) {
			// ID da planilha √© um UUID v√°lido - validar exatamente
			response.then()
					.body("user.id", equalTo(expectedId)) // Compara com ID real
					.body("user.email", notNullValue())
					.body("user.email", not(equalTo("")));

			LogFormatter.logStep("VALIDA√á√ÉO: ID do usu√°rio validado com sucesso");
		} else {
			// ID da planilha n√£o √© um UUID v√°lido - apenas validar que existe
			response.then()
					.body("user.id", notNullValue())
					.body("user.id", not(equalTo("")))
					.body("user.email", notNullValue())
					.body("user.email", not(equalTo("")));

			LogFormatter.logStep("VALIDA√á√ÉO: Login realizado com sucesso");
		}
	}

	/**
	 * Valida uma resposta de erro simples, verificando o status code e uma mensagem de erro espec√≠fica.
	 *
	 * @param statusCode O status code esperado para o erro.
	 * @param mensagemEsperada A mensagem de erro esperada no corpo da resposta (campo "erro").
	 * TODO: Generalizar para suportar diferentes nomes de campos de erro (ex: "message", "error_description"). */
	public void validarErroSimples(int statusCode, String mensagemEsperada) {
		LogFormatter.logStep("VALIDA√á√ÉO: Verificando erro simples com status " + statusCode + " e mensagem '" + mensagemEsperada + "'");
		response.then()
				.statusCode(statusCode)
				.body("erro", equalTo(mensagemEsperada));
		LogFormatter.logStep("VALIDA√á√ÉO: Erro simples verificado com sucesso.");
		LogFormatter.logStep("Corpo da Resposta de Erro:\n" + response.getBody().asPrettyString());
	}

	/**
	 * Valida uma resposta de erro de campo, verificando o status code e a presen√ßa de uma mensagem de erro
	 * associada a um campo espec√≠fico.
	 *
	 * @param statusCode O status code esperado para o erro.
	 * @param nomeDoCampo O nome do campo que gerou o erro (ex: "email", "senha").
	 * @param mensagemEsperada A mensagem de erro esperada para o campo. */
	public void validarErroDeCampo(int statusCode, String nomeDoCampo, String mensagemEsperada) {
		response.then().statusCode(statusCode);
		LogFormatter.logStep("VALIDA√á√ÉO: Verificando erro de campo para '" + nomeDoCampo + "' com status " + statusCode);

		String responseBody = response.getBody().asPrettyString();
		LogFormatter.logStep("RESPOSTA:");
		LogFormatter.logStep(responseBody);

		// Verificar se a resposta cont√©m erros
		boolean erroEncontrado = false;

		// Verificar se h√° um array de erros na resposta
		if (responseBody.contains("\"erros\"") || responseBody.contains("\"errors\"")) {
			// Buscar por erros espec√≠ficos no array
			if (responseBody.contains("\"campo\"") || responseBody.contains("\"field\"")) {
				// Verificar se h√° um erro para o campo espec√≠fico
				if (responseBody.contains("\"" + nomeDoCampo + "\"") ||
						responseBody.contains("\"field\":\"" + nomeDoCampo + "\"") ||
						responseBody.contains("\"campo\":\"" + nomeDoCampo + "\"")) {

					// Verificar se a mensagem est√° presente
					if (responseBody.contains(mensagemEsperada)) {
						erroEncontrado = true;
					}
				}
			}
		}

		// Verificar formato alternativo de erro
		if (!erroEncontrado) {
			// Verificar se h√° erro de valida√ß√£o geral
			if (responseBody.contains("validation") ||
					responseBody.contains("error") ||
					responseBody.contains("erro")) {

				// Verificar se o campo est√° mencionado
				if (responseBody.toLowerCase().contains(nomeDoCampo.toLowerCase())) {
					erroEncontrado = true;
				}
			}
		}

		// Verificar casos espec√≠ficos
		if (!erroEncontrado) {
			// Caso espec√≠fico para email inv√°lido
			if (nomeDoCampo.equals("email") && mensagemEsperada.contains("inv√°lido")) {
				if (responseBody.contains("email") &&
						(responseBody.contains("inv√°lido") || responseBody.contains("invalid"))) {
					erroEncontrado = true;
				}
			}

			// Caso espec√≠fico para senha inv√°lida
			if (nomeDoCampo.equals("senha") && mensagemEsperada.contains("m√≠nimo")) {
				if (responseBody.contains("senha") &&
						(responseBody.contains("m√≠nimo") || responseBody.contains("minimum"))) {
					erroEncontrado = true;
				}
			}

			// Caso espec√≠fico para nome de usu√°rio duplicado
			if (nomeDoCampo.equals("nomeUsuario") && mensagemEsperada.contains("j√° est√° em uso")) {
				if (responseBody.contains("nomeUsuario") &&
						(responseBody.contains("j√° est√° em uso") || responseBody.contains("already in use"))) {
					erroEncontrado = true;
				}
			}
		}

		if (!erroEncontrado) {
			LogFormatter.logStep("ERRO: Resposta n√£o cont√©m o erro esperado");
			LogFormatter.logStep("Esperado: Campo '" + nomeDoCampo + "' com mensagem '" + mensagemEsperada + "'");
			LogFormatter.logStep("Resposta atual: " + responseBody);
		}

		assertTrue("N√£o foi encontrado um erro para o campo '" + nomeDoCampo + "' com a mensagem '" + mensagemEsperada + "'", erroEncontrado);
		LogFormatter.logStep("VALIDA√á√ÉO: Status Code esperado '" + statusCode + "' recebido com sucesso.");
	}

	// M√©todos para mascarar informa√ß√µes sens√≠veis nos logs
	/**
	 * Mascara uma senha para exibi√ß√£o em logs, substituindo parte dela por asteriscos.
	 *
	 * @param senha A senha a ser mascarada.
	 * @return A senha mascarada ou a senha original se o mascaramento estiver desativado. */
	private String mascararSenha(String senha) {
		if (senha == null || senha.isEmpty()) {
			return "***";
		}

		if (!LogConfig.isMascararSenha()) {
			return senha;
		}

		int caracteresVisiveis = LogConfig.getCaracteresVisiveis();
		if (senha.length() <= caracteresVisiveis * 2) {
			return "***" + senha.substring(senha.length() - 1);
		}

		return senha.substring(0, caracteresVisiveis) + "***" + senha.substring(senha.length() - caracteresVisiveis);
	}

	/**
	 * Mascara um ID (geralmente UUID) para exibi√ß√£o em logs.
	 *
	 * @param id O ID a ser mascarado.
	 * @return O ID mascarado ou o ID original se o mascaramento estiver desativado. */
	private String mascararId(String id) {
		if (id == null || id.isEmpty()) {
			return "***";
		}

		if (!LogConfig.isMascararId()) {
			return id;
		}

		int caracteresVisiveis = LogConfig.getCaracteresVisiveis();
		if (id.length() <= caracteresVisiveis * 2) {
			return "***" + id.substring(id.length() - 1);
		}

		return id.substring(0, caracteresVisiveis) + "-****-****-" + id.substring(id.length() - caracteresVisiveis);
	}

	/**
	 * Mascara um token de autentica√ß√£o para exibi√ß√£o em logs.
	 *
	 * @param token O token a ser mascarado.
	 * @return O token mascarado ou o token original se o mascaramento estiver desativado. */
	private String mascararToken(String token) {
		if (token == null || token.isEmpty()) {
			return "***";
		}

		if (!LogConfig.isMascararToken()) {
			return token;
		}

		int caracteresVisiveis = LogConfig.getCaracteresVisiveis();
		if (token.length() <= caracteresVisiveis * 2) {
			return "***" + token.substring(token.length() - 1);
		}

		return token.substring(0, caracteresVisiveis) + "****" + token.substring(token.length() - caracteresVisiveis);
	}
}