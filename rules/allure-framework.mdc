---
description:
globs:
alwaysApply: false
---
# Configuracao e Uso do Allure Framework

O Allure é uma ferramenta de geracao de relatórios para testes automatizados, integrado com Cucumber, JUnit e Rest Assured. O projeto possui um plugin customizado (`AllureAutoReportPlugin`) que automatiza a geracao e abertura do relatório.

## Estrutura de Arquivos do Allure

### Arquivos de Configuracao Obrigatórios
```
src/test/resources/
├── allure.properties              # Configuracao principal
├── allure-categories.json         # Categorizacao de falhas
└── allure-environment.properties  # Configuracao do ambiente
```

### Arquivos de Resultado
```
target/
├── allure-results/                # Resultados brutos (JSON)
└── allure-report/                 # Relatório HTML gerado
```

## Controle de Ativacao do Allure

### Parâmetro Principal: `allure.enabled`
Localizado em `src/test/resources/allure.properties`:
```properties
allure.enabled=true   # Habilita geracao de relatório
allure.enabled=false  # Desabilita geracao de relatório
```

**Comportamento:**
- `true`: Executa testes + gera relatório + abre navegador automaticamente
- `false`: Executa apenas os testes, sem gerar relatório

## Plugin Customizado: AllureAutoReportPlugin

### Localizacao
`src/test/java/org/br/com/testes/utils/AllureAutoReportPlugin.java`

### Funcionalidades
- Executa automaticamente ao final dos testes
- Lê a configuracao `allure.enabled` do arquivo properties
- Gera relatório usando `allure serve target/allure-results`
- Abre navegador automaticamente na URL correta
- Evita abertura dupla do navegador
- Logs de debug comentados para output limpo

### Configuracao no Runner
```java
@CucumberOptions(
    plugin = {
        "org.br.com.testes.utils.LogSummaryPlugin",
        "org.br.com.testes.utils.AllureAutoReportPlugin",  // Plugin customizado
        "html:target/cucumber-reports/cucumber.html",
        "json:target/cucumber-reports/cucumber.json",
        "io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm"  // Plugin oficial (obrigatório)
    },
    ...
)
```

## Scripts de Automacao

### executa-tudo.bat
Script principal que:
- Lê `allure.enabled` do arquivo properties
- Executa testes com perfil apropriado
- Gera relatório se habilitado
- Abre navegador automaticamente

### abrir-allure.bat
Script para abrir relatório existente:
- Tenta porta 56565 primeiro
- Fallback para porta 8080
- Filtra mensagens de erro

## Boas Práticas para Allure

### 1. Controle de Ativacao
- **Sempre** use `allure.enabled=false` em ambientes de CI/CD
- **Sempre** use `allure.enabled=true` em desenvolvimento local
- **Nunca** commite `allure.enabled=true` em producao

### 2. Estrutura de Testes
- Steps devem ser simples, apenas chamando controllers
- Controllers devem conter toda lógica de negócio
- Use `LogFormatter.logStep()` para logs (sem acentos)

### 3. Organizacao de Features
- Sem acentos em nomes de arquivos
- Prefixos Cucumber em inglês: `Feature:`, `Scenario:`, `Given`, `When`, `Then`
- Tags obrigatórias: `@ATJ-[número]` e `@all`

### 4. Configuracao de Ambientes
```properties
# allure-environment.properties
Environment=Development
BaseURL=https://dev-api.example.com
Framework=Cucumber + Rest Assured
Language=Java 21
```

## Troubleshooting do Allure

### Problema: Relatório Abre Vazio
**Solucao:**
- Verifique se existem arquivos em `target/allure-results/`
- Execute `mvn clean test` para limpar e regenerar
- Verifique se o plugin oficial do Allure está configurado

### Problema: Navegador Abre Duas Vezes
**Solucao:**
- O plugin customizado já trata isso automaticamente
- Se persistir, verifique se há outros scripts .bat executando

### Problema: Erro de Porta em Uso
**Solucao:**
- Feche servidores Allure antigos: `taskkill /f /im java.exe`
- Use o script `abrir-allure.bat` que tenta portas alternativas
- Mude a porta manualmente: `allure serve target/allure-results -p 8080`

### Problema: Erro "Could not add attachment: no test is running"
**Solucao:**
- O plugin oficial do Allure é obrigatório
- Mantenha `"io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm"` na configuracao

### Problema: Allure Não Respeita `allure.enabled=false`
**Solucao:**
- O plugin customizado já verifica essa configuracao
- Verifique se o arquivo `allure.properties` está sendo lido corretamente
- Execute `mvn clean` antes dos testes

## Comandos Úteis

### Execucao Manual
```bash
# Executar com Allure habilitado
mvn test -P with-allure

# Executar sem Allure
mvn test -P no-allure

# Gerar relatório manualmente
mvn allure:report

# Abrir relatório manualmente
mvn allure:serve
```

### CLI Allure
```bash
# Abrir relatório existente
allure serve target/allure-results

# Gerar relatório estático
allure generate target/allure-results --clean -o allure-report
```

## Integracao com CI/CD

### Jenkins Pipeline
```groovy
pipeline {
    agent any
    stages {
        stage('Test') {
            steps {
                sh 'mvn test -P with-allure'
            }
        }
        stage('Generate Report') {
            steps {
                sh 'mvn allure:report'
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'allure-report',
                    reportFiles: 'index.html',
                    reportName: 'Allure Report'
                ])
            }
        }
    }
}
```

### GitHub Actions
```yaml
name: Tests with Allure
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        java-version: '21'
    - name: Run tests
      run: mvn test -P with-allure
    - name: Generate Allure Report
      run: mvn allure:report
    - name: Upload Allure Report
      uses: actions/upload-artifact@v2
      with:
        name: allure-report
        path: allure-report/
```

## Referências
- [Documentacao oficial do Allure](https://docs.qameta.io/allure/)
- [Allure Maven Plugin](https://docs.qameta.io/allure/#_maven)
- [Exemplo de integracao Cucumber + Allure](https://github.com/allure-framework/allure-cucumber)
- [Documentacao oficial da API Cielo](https://docs.cielo.com.br/ecommerce-cielo/reference/sobre-a-api)

---

**IMPORTANTE:** O plugin customizado `AllureAutoReportPlugin` é essencial para o funcionamento correto do Allure neste projeto. Sempre mantenha a configuracao `allure.enabled` adequada para cada ambiente.
